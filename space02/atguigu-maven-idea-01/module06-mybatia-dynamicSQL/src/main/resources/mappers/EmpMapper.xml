<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.atguigu.mybatis.interfaces.EmpInterface">
    <!--List<Emp> selectEmpBycondition(Emp condition);-->
    <!--

            /*使用 where 标签动态生成SQL语句中的 where 句子*/
        /*1： 如果where标签内没有有效的条件， 南无最终的SQL语句中， 不会出现where 关键词*/
        /*2； 能够去除 查询后的 多余的 and 和 or*/
             /*使用if标签 可以让SQL 语句的片段， 在满足条件的时候 假如最终的SQL语句*/
            /*我们现在在拼接 SQL 语句，现在在写的是java 的代码*/
            /*test属性： if标签中的判断条件， 在test 属性中 能直接访问 interface 抽象方法 中的数据 */
            /*比如 ：selectEmpBycondition(Emp condition); 中的 condition */
    -->
    <select id="selectEmpBycondition" resultType="com.atguigu.mybatis.entity.Emp">
        select emp_id,emp_name,emp_salary from Emp
        <where>

            <if test="empName != null">
                emp_name=#{empName} or
            </if>
            <if test="empSalary &gt; 1002">
                emp_salary>#{empSalary} or
            </if>

        </where>
    </select>

<!-- Set 标签的作用 就是整合标签内动态的条件， 去除多余的逗号   -->
    <!-- 不要忘记去写上逗号！！-->
    <update id="updateEmpConditional">
        update Emp
        <set>
            <if test="empName != null">
                emp_name=#{empName},
            </if>
            <if test="empSalary &gt; 1000">
                emp_salary=#{empSalary},
            </if>
        </set>
        where emp_id=4;

    </update>

    <!--List<Emp> empList = empMapper.selectEmpConditionalbyTrim(condition);-->
    <!-- 使用trim 和使用上面的 where标签 是一样的功能， where 肯定要更加智能一些-->
    <!--trim 是更加灵活-->

    <select id="selectEmpConditionalbyTrim" resultType="com.atguigu.mybatis.entity.Emp">
        select emp_id,emp_name,emp_salary from Emp
        <trim prefix="where" suffixOverrides="and|or">
            <if test="empName != null">
                emp_name=#{empName} or
            </if>
            <!-- 在你给的 empSalary>0的基础上 查出所有emp 工资大于 emp_salary的例子   -->
            <if test="empSalary &gt; 0">
                emp_salary>=#{empSalary} or
            </if>
        </trim>
    </select>

    <!--把重复使用的 SQL 拿出来， 使用sql 标签-->
    <sql id="empParticalSelect">
        select emp_id,emp_name,emp_salary from Emp
    </sql>

    <!--    List<Emp> testSelectEmpByChooseWhenOtherwise(Emp condition);-->
    <!---->
    <select id="testSelectEmpByChooseWhenOtherwise" resultType="com.atguigu.mybatis.entity.Emp">
        <include refid="empParticalSelect"/>
        where
        <choose>
            <!--每一个when 中有一个 具体的分支条件-->
            <!--只有第一个 when 满足， 后面的 when 就不会执行-->
            <when test="empName != null">
                emp_name=#{empName}
            </when>

            <when test="empSalary &gt; 0">
                emp_salary>=#{empSalary}
            </when>

            <otherwise>
                1=1
            </otherwise>
        </choose>
    </select>


    <!-- batch insert-->
    <!--void batchInsert(@Param("empList") List<Emp> empList);-->
    <!--item: 遍历出来的每一个对象 都要起一个名字， 便于 引用。-->
    <!--index： the index of each item-->
    <!--separator: 每次循环生成的字符串 之间的separator  比如：insert into Emp(emp_name,emp_salary) values(),() -->
    <!--open : 生成的整体之前 加上什么 加上values 因为 ： 我们想要生成的SQL 是insert into Emp(emp_name,emp_salary) values(),()。。 -->
    <!--close : 生成的整体之后 加上什么-->
    <!--如果没有用 @Param ， 而且 foreach 标签也没有使用默认 “list” 则会报错。-->
    <insert id="batchInsert">
        insert into Emp(emp_name,emp_salary)
        <foreach collection="empList" item="emp" separator="," open="values">
            (#{emp.empName},#{emp.empSalary})
        </foreach>
    </insert>




    <!-- 使用批量更新  void batchUpdate(List<Emp> empList);-->
    <!--separator=";"  因为多个 SQL 进行更新， ; 是每个SQL 的结束符。-->
    <!--jdbc.properties中需要改成: mysql_dev_url=jdbc:mysql://192.168.115.128:3306/test06_mybatis01?allowMultiQueries=true-->
    <!--这样的话就支持批量操作-->
    <update id="batchUpdate">
        <foreach collection="empList" item="emp" separator=";">
            update Emp set emp_name=#{emp.empName},emp_salary=#{emp.empSalary}
            where emp_id=#{emp.empId}
        </foreach>
    </update>

</mapper>